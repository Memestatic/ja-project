@page "/fir"
@using System.Diagnostics
@using System.Runtime.InteropServices
@rendermode InteractiveServer

<PageTitle>FIR</PageTitle>

<div class="card card-body m-5 w-50">
    <h1 class="mb-4">FIR Low Pass Filter</h1>

    <InputFile OnChange="HandleFileSelected" MaxFileSize="2097152" />

    <div class="mt-3">
        <h5>Select the number of threads:</h5>
        <div class="btn-group me-2 mt-2" role="group">
            <button type="button" class="btn btn-primary" @onclick="() => SetThreadCount(1)">1</button>
            <button type="button" class="btn btn-primary" @onclick="() => SetThreadCount(2)">2</button>
            <button type="button" class="btn btn-primary" @onclick="() => SetThreadCount(4)">4</button>
            <button type="button" class="btn btn-primary" @onclick="() => SetThreadCount(maxThreads)">@maxThreads</button>
        </div>
    </div>

    <div class="form-check">
        <input class="form-check-input" type="radio" name="dllMethod" value="ASM" @onchange="() => SelectDllMethod(new string(['A', 's', 'm']))">
        <label class="form-check-label" for="flexRadioDefault1">
            ASM Dll
        </label>
    </div>
    <div class="form-check">
        <input class="form-check-input" type="radio" name="dllMethod" value="C" @onchange="() => SelectDllMethod(new string(['C']))" checked>
        <label class="form-check-label" for="flexRadioDefault2">
            C Dll
        </label>
    </div>

    <button class="btn btn-success mt-3" @onclick="Start" disabled="@isFileNotSelected">Apply FIR Filter</button>
</div>

@if (!string.IsNullOrEmpty(audioSrc))
{
    <div class="card bg-light mt-5 p-3 w-75">
        <h4>Filtered Audio:</h4>
        <audio controls class="w-100">
            <source src="@audioSrc" type="audio/wav" />
            Your browser does not support the audio element.
        </audio>

        <p class="mt-3">
            Czas wykonania algorytmu: @timeResult ms
        </p>
    </div>
}

@code {
    double timeResult = 0;
    private IBrowserFile selectedFile;
    private bool isFileNotSelected = true;
    private string audioSrc; // Path to the filtered audio
    private int threadCount = 1; // Default number of threads
    private int maxThreads = Environment.ProcessorCount; // Maximum number of threads
    private float[] coefficients; // FIR filter coefficients
    private string selectedDll = "C";
    private ProcessFIRDelegate ProcessFIR;

    private WavFileProcessor wavFileProcessor = new WavFileProcessor();

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        audioSrc = null;
        Console.WriteLine("File selected");
        selectedFile = e.File;
        isFileNotSelected = selectedFile == null || selectedFile.ContentType != "audio/wav"; // Added file type check
        StateHasChanged();
    }

    private void SetThreadCount(int count)
    {
        threadCount = count;
        StateHasChanged();

        Console.WriteLine($"Thread count set to: {count}");
    }

    private void SelectDllMethod(string dll)
    {
        if (dll == "C")
        {
            ProcessFIR = NativeMethodsC.ProcessFIRFilter;
        }
        else if (dll == "Asm")
        {
            ProcessFIR = NativeMethodsAsm.ProcessFIRFilter;
        }

        Console.WriteLine($"Selected DLL: {dll}");
    }

    private async Task Start()
    {
        if (selectedFile == null)
        {
            Console.WriteLine("No file selected.");

            return;
        }

        try
        {
            Stopwatch stopwatch = new();

            float[] floatData = await wavFileProcessor.ConvertWavToFloatArray(selectedFile); //przekonwertowane dane wejściowe na tablice floatow
            long totalSamples = floatData.Length; //wielkośc tych danych
            float[][] chunks = new float[totalSamples / threadCount][]; //mając wielkość danych i liczbę wątkow tworzę miejsce na 
                                                                        //dane dla każdego wątku - przygotowuje tablice 2-wymiarowa
                                                                        //gdzie 1 wymiar to ilość wątków a 2 wymiar to dane dla każdego wątku

            setCoefficents();

            // Split the data into chunks
            for (int i = 0; i < threadCount; i++)                       //dla kazdego watku tworze tablice z danymi
			{
				long start = i * (totalSamples / threadCount);          //początek danych dla danego wątku
				long end = (i + 1) * (totalSamples / threadCount);      //koniec danych dla danego wątku

				float[] chunk = new float[end - start];                 //tworze tablice dla danego wątku
				Array.Copy(floatData, start, chunk, 0, end - start);     //kopiuje dane z tablicy floatData do tablicy chunk

				chunks[i] = chunk;                                      //przypisuje tablice chunk do tablicy chunks
			} 

            // Ensure that the DLL method has been selected
            if (ProcessFIR == null)                                     //tu sie upewniam ze dlla jest wybrana w gui
            {
                Console.WriteLine("DLL method not selected.");
                SelectDllMethod("C");
            }

            stopwatch.Start();                                          //zaczynam mierzyc czas

            // Use Parallel.For to process FIR filtering in parallel
            Parallel.For(0, threadCount, i =>                           //tworze n równoległych wątków gdzie n to threadCount - ustalona wartosc poprzez GUI
            {
                ProcessFIR(chunks[i], coefficients, chunks[i].Length, coefficients.Length);     //wywoluje procedure z porcją danych
                
            });

            stopwatch.Stop();                                           //koncze mierzyc czas
            timeResult = stopwatch.Elapsed.TotalMilliseconds;

            // Combine processed chunks back into the final array
            float[] processedData = new float[totalSamples];
            for (int i = 0; i < threadCount; i++)                       //tutaj potem łącze te chunki z powrotem w całośc zeby miec cały plik
            {
                Array.Copy(chunks[i], 0, processedData, i * (totalSamples / threadCount), chunks[i].Length);
            }


            audioSrc = wavFileProcessor.ConvertFloatArrayToWav(processedData);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file: {ex.Message}, {ex.StackTrace}");
        }
    }

    void setCoefficents()
    {
        this.coefficients = Coeffs.ComputeCoefficients(44100, 150, 61);
    }
  
}